% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-dgtmatrix.R
\name{bind_matrix}
\alias{bind_matrix}
\alias{cbind_matrix}
\alias{rbind_matrix}
\title{Bind multiple matrix-like objects}
\usage{
cbind_matrix(...)

rbind_matrix(...)
}
\arguments{
\item{...}{matrix-like objects to combine}

\item{returns}{a matrix-like object, the specific type is determined by the
Matrix package's coercion rules}
}
\description{
Drop-in replacement for rbind/cbind-ing labeled matrices with unequal
dimensions.
}
\details{
Prior to row- or column-binding the matrices are padded to ensure the
non-binding dimensions have the same length and, importantly, the same order.

For example, when column-binding, row names are matched and any missing rows
are added. Consider \code{mat1}:

\if{html}{\out{<div class="sourceCode">}}\preformatted{  A B
w 1 .
x . 2
}\if{html}{\out{</div>}}

and \code{mat2}:

\if{html}{\out{<div class="sourceCode">}}\preformatted{  C D
x 3 4
}\if{html}{\out{</div>}}

To column bind these two matrices we need to add empty row \code{w} to \code{mat2} but
simply calling \code{cbind(mat1, pad_matrix(mat2, rownames = "w"))} yields the
incorrect result:

\if{html}{\out{<div class="sourceCode">}}\preformatted{  A B C D
w 1 . 3 4
x . 2 . .
}\if{html}{\out{</div>}}

We can get the correct result with \code{cbind_matrix(mat1, mat2)}, which orders
the rows prior to concatenating:

\if{html}{\out{<div class="sourceCode">}}\preformatted{  A B C D
w 1 . . .
x . 2 3 4
}\if{html}{\out{</div>}}

Base \code{rbind()} \emph{will} concatenate matrices with different numbers of columns
\emph{but} ignores dimension labels, which can also produce incorrect resuts. For
example, consider \code{mat3}:

\if{html}{\out{<div class="sourceCode">}}\preformatted{  B
y 3
z 4
}\if{html}{\out{</div>}}

Performing \code{rbind(mat1, mat3)} yields:

\if{html}{\out{<div class="sourceCode">}}\preformatted{  A B
w 1 .
x . 2
y 3 .
z 4 .
}\if{html}{\out{</div>}}

which incorrectly appending values from \code{mat3}'s \code{B} column to \code{mat1}'s \code{A}
column, whereas \code{rbind_matrix(mat1, mat3)} produces the correct result:

\if{html}{\out{<div class="sourceCode">}}\preformatted{  A B
w 1 .
x . 2
y . 3
z . 4
}\if{html}{\out{</div>}}

These methods also prevent binding matrices that would produce duplicate
coordinates. For example, consider \code{mat4}

\if{html}{\out{<div class="sourceCode">}}\preformatted{  A
w 1
}\if{html}{\out{</div>}}

and \code{mat5}

\if{html}{\out{<div class="sourceCode">}}\preformatted{  B
w 2
}\if{html}{\out{</div>}}

Running \code{rbind(mat4, mat5)} causes column name \code{B} to be lost:

\if{html}{\out{<div class="sourceCode">}}\preformatted{  A
w 1
w 2
}\if{html}{\out{</div>}}

whereas \code{rbind_matrix(mat4, mat5)} throws an error.
}
