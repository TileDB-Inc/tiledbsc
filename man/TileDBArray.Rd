% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TileDBArray.R
\name{TileDBArray}
\alias{TileDBArray}
\title{TileDB Array Base Class}
\description{
Base class for representing an individual TileDB array.
}
\details{
\subsection{Initialization}{

Initializing a \code{TileDBArray} object does not automatically create a new array
at the specified \code{uri} if one does not already exist because we don't know
what the schema will be. Arrays are only created by child classes, which
populate the private \code{create_empty_array()} and \code{ingest_data()} methods.
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{verbose}}{Whether to print verbose output}

\item{\code{config}}{optional configuration}

\item{\code{ctx}}{optional tiledb context}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{uri}}{The URI of the TileDB array.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{TileDBArray$new()}}
\item \href{#method-class}{\code{TileDBArray$class()}}
\item \href{#method-print}{\code{TileDBArray$print()}}
\item \href{#method-array_exists}{\code{TileDBArray$array_exists()}}
\item \href{#method-tiledb_array}{\code{TileDBArray$tiledb_array()}}
\item \href{#method-get_metadata}{\code{TileDBArray$get_metadata()}}
\item \href{#method-add_metadata}{\code{TileDBArray$add_metadata()}}
\item \href{#method-schema}{\code{TileDBArray$schema()}}
\item \href{#method-dimensions}{\code{TileDBArray$dimensions()}}
\item \href{#method-attributes}{\code{TileDBArray$attributes()}}
\item \href{#method-dimnames}{\code{TileDBArray$dimnames()}}
\item \href{#method-fragment_count}{\code{TileDBArray$fragment_count()}}
\item \href{#method-attrnames}{\code{TileDBArray$attrnames()}}
\item \href{#method-clone}{\code{TileDBArray$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new TileDBArray object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$new(uri, verbose = TRUE, config = NULL, ctx = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{uri}}{URI for the TileDB array}

\item{\code{verbose}}{Print status messages}

\item{\code{config}}{optional configuration}

\item{\code{ctx}}{optional tiledb context}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-class"></a>}}
\if{latex}{\out{\hypertarget{method-class}{}}}
\subsection{Method \code{class()}}{
Print the name of the R6 class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$class()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Print summary of the array.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-array_exists"></a>}}
\if{latex}{\out{\hypertarget{method-array_exists}{}}}
\subsection{Method \code{array_exists()}}{
Check if the array exists.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$array_exists()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
TRUE if the array exists, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tiledb_array"></a>}}
\if{latex}{\out{\hypertarget{method-tiledb_array}{}}}
\subsection{Method \code{tiledb_array()}}{
Return a \code{\link{TileDBArray}} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$tiledb_array(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Optional arguments to pass to \code{tiledb::tiledb_array()}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{\link[tiledb:tiledb_array]{tiledb::tiledb_array}} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_metadata"></a>}}
\if{latex}{\out{\hypertarget{method-get_metadata}{}}}
\subsection{Method \code{get_metadata()}}{
Retrieve metadata from the TileDB array.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$get_metadata(key = NULL, prefix = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{The name of the metadata attribute to retrieve.}

\item{\code{prefix}}{Filter metadata using an optional prefix. Ignored if \code{key}
is not NULL.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of metadata values.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_metadata"></a>}}
\if{latex}{\out{\hypertarget{method-add_metadata}{}}}
\subsection{Method \code{add_metadata()}}{
Add list of metadata to the specified TileDB array.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$add_metadata(metadata, prefix = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{metadata}}{Named list of metadata to add.}

\item{\code{prefix}}{Optional prefix to add to the metadata attribute names.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-schema"></a>}}
\if{latex}{\out{\hypertarget{method-schema}{}}}
\subsection{Method \code{schema()}}{
Retrieve the array schema
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$schema()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{\link[tiledb:tiledb_array_schema]{tiledb::tiledb_array_schema}} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dimensions"></a>}}
\if{latex}{\out{\hypertarget{method-dimensions}{}}}
\subsection{Method \code{dimensions()}}{
Retrieve the array dimensions
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$dimensions()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of \code{\link[tiledb:tiledb_dim]{tiledb::tiledb_dim}} objects
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-attributes"></a>}}
\if{latex}{\out{\hypertarget{method-attributes}{}}}
\subsection{Method \code{attributes()}}{
Retrieve the array attributes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$attributes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of \code{\link[tiledb:tiledb_attr]{tiledb::tiledb_attr}} objects
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dimnames"></a>}}
\if{latex}{\out{\hypertarget{method-dimnames}{}}}
\subsection{Method \code{dimnames()}}{
Retrieve dimension names
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$dimnames()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A character vector with the array's dimension names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-fragment_count"></a>}}
\if{latex}{\out{\hypertarget{method-fragment_count}{}}}
\subsection{Method \code{fragment_count()}}{
Get number of fragments in the array
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$fragment_count()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-attrnames"></a>}}
\if{latex}{\out{\hypertarget{method-attrnames}{}}}
\subsection{Method \code{attrnames()}}{
Retrieve attribute names
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$attrnames()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A character vector with the array's attribute names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
